<?xml version="1.0" encoding="UTF-8"?>

<!-- scan: 配置文件如果发生改变，将会被重新加载，默认值为true.
     scanPeriod: 监测配置文件是否有修改的时间间隔,默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟.
     debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false.
 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL-->
    <property name="NAME" value="account"/>
    <property name="LOG_PATH" value="logs/cloud-product"/>
    <property name="MAX_HISTORY" value="30"/>
    <property name="MAX_FILE_SIZE" value="10MB"/>
    <property name="TOTAL_FILE_SIZE" value="100MB"/>

    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>

    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyyMMdd HH:mm:ss} %X{user} [%thread] %clr(%-5level %logger{50} [%file : %line] -%msg%n)
            </pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件,单个文件最大10MB，最多保留30天的,全部文件最大100MB -->
    <appender name="ALL_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/all-%d{yyyyMMdd}-%i.log</fileNamePattern>
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <totalSizeCap>${TOTAL_FILE_SIZE}</totalSizeCap>
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyyMMdd HH:mm:ss} %X{user} [%thread] %logger{50} [%file : %line] -%msg%n</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <appender name="ERR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/error-%d{yyyyMMdd}-%i.log</fileNamePattern>
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <totalSizeCap>${TOTAL_FILE_SIZE}</totalSizeCap>
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyyMMdd HH:mm:ss} %X{user} [%thread] %logger{50} [%file : %line] -%msg%n</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <appender name="ASYNC_ALL_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="ALL_FILE"/>
    </appender>

    <appender name="ASYNC_ERR_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="ERR_FILE"/>
    </appender>

    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ASYNC_ERR_FILE"/>
        <appender-ref ref="ASYNC_ALL_FILE"/>
    </root>
</configuration>







